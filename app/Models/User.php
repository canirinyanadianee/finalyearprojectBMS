<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
        'status',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Get the donor profile associated with the user.
     */
    public function donor()
    {
        return $this->hasOne(Donor::class);
    }

    /**
     * Get the hospital profile associated with the user.
     */
    public function hospital()
    {
        return $this->hasOne(Hospital::class);
    }

    /**
     * Get the blood bank profile associated with the user.
     */
    public function bloodBank()
    {
        return $this->hasOne(BloodBank::class);
    }

    /**
     * Get the notifications for the user.
     */
    public function notifications()
    {
        return $this->hasMany(Notification::class);
    }

    /**
     * Get the blood requests requested by the user.
     */
    public function requestedBloodRequests()
    {
        return $this->hasMany(BloodRequest::class, 'requested_by');
    }

    /**
     * Get the blood requests approved by the user.
     */
    public function approvedBloodRequests()
    {
        return $this->hasMany(BloodRequest::class, 'approved_by');
    }

    /**
     * Get the reports generated by the user.
     */
    public function reports()
    {
        return $this->hasMany(Report::class, 'generated_by');
    }

    /**
     * Check if user is admin
     */
    public function isAdmin()
    {
        return $this->role === 'admin';
    }

    /**
     * Check if user is donor
     */
    public function isDonor()
    {
        return $this->role === 'donor';
    }

    /**
     * Check if user is hospital
     */
    public function isHospital()
    {
        return $this->role === 'hospital';
    }

    /**
     * Check if user is blood bank
     */
    public function isBloodBank()
    {
        return $this->role === 'blood_bank';
    }
}
